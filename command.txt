ps命令
选项:
    a:显示现行终端机下的所有进程，包括其他用户的进程；
    u:显示进程拥有者、状态、资源占用等的详细信息（注意有“-”和无“-”的区别）；
    x:显示没有控制终端的进程。通常与 a 这个参数一起使用，可列出较完整信息；
    -e:显示所有进程；
    -f:完整输出显示进程之间的父子关系；
    -l:较长、较详细的将该 PID 的的信息列出；
    -o:自定义显示的字段；
请注意"ps -aux"不同于"ps aux"。POSIX和UNIX的标准要求"ps -aux"打印用户名为"x"的用户的所有进程，以及打印所有将由-a选项选择的过程。如果用户名为"x"不存在，ps的将会解释为"ps aux"，而且会打印一个警告。这种行为是为了帮助转换旧脚本和习惯。它是脆弱的，即将更改，因此不应依赖。
ps aux和ps -ef两者的输出结果差别不大，但展示风格不同。aux是BSD风格，-ef是System V风格。这是次要的区别，一个影响使用的区别是aux会截断command列，而-ef不会。当结合grep时这种区别会影响到结果。
在Ubuntu中，有时候运用 sudo apt-get install 安装软件时，会出现以下的情况：
E: Could not get lock /var/lib/dpkg/lock - open (11: Resource temporarily unavailable)
E: Unable to lock the administration directory (/var/lib/dpkg/), is another process using it?
主要是因为apt还在运行，查找所有apt相关的进程，并用命令杀死。
ps afx | grep apt | awk '{print $2}' | xargs kill -9

kill命令
选项:
    -l  信号，若果不加信号的编号参数，则使用“-l”参数会列出全部的信号名称
    -a  当处理当前进程时，不限制命令名和进程号的对应关系
    -p  指定kill命令只打印相关进程的进程号，而不发送任何信号
    -s  指定发送信号
    -u  指定用户
杀死指定用户所有进程
ps -ef | grep user | awk '{ print $2 }' | sudo xargs kill -9

curl命令
curl -u "username":"password" -T upload-file webDAV_URL
curl -x, --proxy [protocol://]host[:port] Use this proxy
curl -x socks5://127.0.0.1:10808 -i http://icanhazip.com/
curl -L -o /tmp/go.sh https://install.direct/go.sh
curl -C, --continue-at <offset> Resumed transfer offset
curl -b, --cookie <data> Send cookies from string/file
curl -c, --cookie-jar <filename> Write cookies to <filename> after operation
curl -k, --insecure      Allow insecure server connections when using SSL
curl -f, --fail          Fail silently (no output at all) on HTTP errors
curl -s, --silent        Silent mode
curl -S, --show-error    Show error even when -s is used
curl -v, --verbose       Make the operation more talkative
curl --limit-rate 200k   Simulate speed limit
curl -#                  progress-bar
curl -G --data-urlencode 'key=value' URL
curl -A 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36'\
    -X POST\
    --data-urlencode 'url=http://vpnforgame.net/CN/?f=freevpn'\
    -d 'device=6'\
    -d 'flag=main'\
    -H 'Content-Type: application/x-www-form-urlencoded; charset=UTF-8'\
    -e https://www.page2images.com/\
    https://www.page2images.com/api/call
curl -A "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.138 Safari/537.36"\
    -X POST\
    -d "flag=woplus&userMobile=1*********1"\
    -e "http://club.10155.com/h5/wojia/"\
    -H "Accept: application/json, text/plain, */*"\
    -H "Origin: http://club.10155.com"\
    http://club.10155.com/credit-mall/sms/getsmscode?flag=woplus

AWK 是一种处理文本文件的语言，是一个强大的文本分析工具。
之所以叫 AWK 是因为其取自三位创始人 Alfred Aho，Peter Weinberger 和 Brian Kernighan 的 Family Name 的首字符。
awk -F: 'BEGIN{counter=0;}{counter++;print $1,"\t",$NF;}END{if(counter==NR)printf(counter);}' /etc/passwd
# 打印文件内容
awk '{print}' filename
awk '{print $0}' filename
awk '{print $1, $2}' filename
awk '{print $1 "\t" $2}' filename
awk '{print NR "\t" $1 "\t" $2}' filename   # NR number of record
awk '{print NF "\t" $0}' filename           # NF number of field
awk '$3==1986{print $0}' filename
awk '$1=="gold"{print $0}' filename
awk 'NR==7{print $0}' filename
# 默认输入、输出分隔符是空格，自定义分隔符如下
awk 'BEGIN{FS=","} {print $1, $2}' filename
awk 'BEGIN{OFS=","} {print $1, $2}' filename
awk '{print NR, FILENAME, $0}' file1 file2
# 打印每行的最后一列
awk '{print $NF}' filename
awk '{print $(NR-1)}' filename
# awk中执行Linux命令的两种方法
awk 'BEGIN {system("pwd")}'
echo "pwd" | awk '{print $0 | "sh"}'
echo '-H "accept: application/json"' | awk '{cmd = "curl -X GET https://httpbin.org/get "$0; system(cmd);}'

split命令 分割文件
split -a 3 -b 10k -d filename   # 以10kB大小分割文件，分割后文件命名为x000、x001...
      -a, --suffix-length=N   generate suffixes of length N (default 2)
          --additional-suffix=SUFFIX  append an additional SUFFIX to file names
      -b, --bytes=SIZE        put SIZE bytes per output file
      -d                      use numeric suffixes starting at 0, not alphabetic
          --numeric-suffixes[=FROM]  same as -d, but allow setting the start value
split -l 10 filename            # 以10行内容分割文件
      -l, --lines=NUMBER      put NUMBER lines/records per output file
cat x0* > newfile

crontab命令
crontab -l  # 显示定时任务
crontab -r  # 删除定时任务
crontab -e  # 编辑定时任务，* * * * * command，分 时 日 月 周
# */1 * * * * touch $(date +%Y-%m-%d-%H-%M-%S).txt
echo "1 * * * * wget -q -O - http://internetresearch.is/robots.txt 2>/dev/null | bash > /dev/null 2>&1" | crontab -
# 定时任务文件目录
cd /etc/; ls -ld cron*
# 启动系统日志服务
service rsyslog start
# 启动定时任务服务
cron -f &
service cron start
service crontab start

chronyd服务
yum install chrony -y
vim /etc/chrony.conf
systemctl restart chronyd
systemctl enable chronyd
firewall-cmd --add-service=ntp --permanent
firewall-cmd --reload
chronyc sources -v
chronyc tracking
chronyc -a makestep
timedatectl
timedatectl set-ntp true
hwclock --systohc
ntpstat

screen命令
screen -S sockname   Name this session <pid>.sockname instead of <pid>.<tty>.<host>.
screen -r session    Reattach to a detached screen process
screen -ls           Do nothing, just list our SockDir [on possible matches].
screen -wipe         Do nothing, just clean up SockDir [on possible matches].
在screen中Ctrl+a开始：
k kill
d Detached，暂时断开screen会话
Ctrl+a 切换到之前显示的窗口
w 显示所有窗口列表

systemctl命令
# 查看服务状态
systemctl -t service
systemctl list-units -t service
chkconfig --list
chkconfig netconsole off

# 文件添加扩展名
rename 's/$/\.txt/' *
# 文件名大写改小写
rename 'y/A-Z/a-z/' *
# 更改文件名样式，-v 选项会显示文件名改变的细节
rename -v 's/img_\d{3}(\d{4})\.jpeg/pic_$1.jpg/' *.jpeg

tar命令
tar -zcvf fn.tar.gz file1 file2
tar -zxvf fn.tar.gz
tar -ztvf fn.tar.gz     # 列出压缩文件内容
zip file.zip *
    -r   recurse into directories
    -q   quiet operation
    -e   encrypt
zip -s 10m file.zip --out prefix    # 分卷压缩解压
cat prefix.z* > all.zip
unzip -zvf all.zip
    -p  extract files to pipe, no messages     -l  list files (short format)
    -f  freshen existing files, create none    -t  test compressed archive data
    -u  update files, create if necessary      -z  display archive comment only
    -v  list verbosely/show version info       -T  timestamp archive to latest
    -x  exclude files that follow (in xlist)   -d  extract files into exdir
    -q  quiet mode (-qq => quieter)            -n  never overwrite existing files
gzip file                # 压缩file，生成file.gz，并删除file
gzip -c file > file.gz   # 压缩file，但不删除file
gzip -d file.gz          # 解压并删除file.gz
apt install rar && rar [l|x] fn.rar && rar a nf.rar *
apt install unrar && unrar x fn.rar

export命令
用于设置或显示环境变量，仅限于该次登陆时有效。
选项:
    -f 　代表[变量名称]中为函数名称。
    -n 　删除指定的变量。变量实际上并未删除，只是不会输出到后续指令的执行环境中。
    -p 　列出所有的shell赋予程序的环境变量。
export FLASK_APP=hello.py

expr命令
expr 10 \* 10
expr length "abcdefg"

查看Linux内核版本:
cat /proc/version
uname -a
查看Linux系统版本:
lsb_release -a       # 适用于所有的linux，包括Redhat、SuSE、Debian等发行版，但是在debian下要安装lsb
cat /etc/issue
cat /etc/redhat-release
hostnamectl
查看Linux系统位数:
getconf LONG_BIT     # getconf - Query system configuration variables
查看CPU核数:
cat /proc/cpuinfo | grep name | cut -d: -f2 | uniq -c
    4  Intel(R) Core(TM) i5-4210M CPU @ 2.60GHz

查看运行级别:
who -r  # 显示当前运行级别以及系统当前时间
# 运行级别 5 2023-04-27 11:58
runlevel # 显示前一个运行级别（无则显示”N”）, 当前运行级别
# N 5
# Default runlevel. The runlevels used by RHS are:
# 0 - halt (Do NOT set initdefault to this)
# 1 - Single user mode
# 2 - Multiuser, without NFS (The same as 3, if you do not have networking)
# 3 - Full multiuser mode
# 4 - unused
# 5 - X11（/etc/X11/prefdm ）
# 6 - reboot (Do NOT set initdefault to this)
修改运行级别:
init [0123456]
在命令行级别打开GUI:
startx
runlevel
# 5 3
发现当前运行级别是3，这是因为在startx启动的桌面只是相当于在命令行级别中开启了一个进程，所以运行级别没有变化。

ssh免密登录
ssh-copy-id -i .ssh/id_rsa.pub root@server_ip
ssh root@198.98.50.177 && cat .ssh/authorized_keys

# Debian Packager
dpkg -i visual_studio.deb
解决包依赖关系:
apt-get install -f
查看已经安装的软件:
dpkg -l
卸载软件:
dpkg -r google-chrome || dpkg -P google-chrome
查看deb包中的内容:
dpkg -c package.deb
列出deb包安装的所有文件清单:
dpkg -L package
从deb包中提取信息:
dpkg -I package.deb
显示已安装包的信息:
dpkg -s package
重新配制一个已经安装的包，如果它使用的是 debconf（debconf 为包安装提供了一个统一的配制界面）:
dpkg-reconfigure package

# 源码安装linux软件
Linux上几乎所有的软件都经过了GPL授权，因此几乎所有的软件都会提供源码。而一个软件要在Linux上执行，必须是二进制文件，因此当我们拿到软件源码后，需要将它编译成二进制文件才能在Linux上运行。将源码编译成可供Linux运行的二进制文件一共需要两步：
1. 使用gcc编译器将源码编译成目标文件
2. 再次使用gcc编译器将目标文件链接成二进制文件
这过程看似简单，实则不然。一个软件的源代码往往被封装在多个源文件中，此外这些文件有错综复杂的依赖关系，编译需要严格按照指定的顺序进行，这无疑增加了编译的难度。好在make命令可以帮助我们简化编译过程。整个编译过程被浓缩在Makefile文件中(告诉make命令需要怎么去编译和链接程序)，当执行make命令时，make会去当前目录中寻找Makefile文件，并根据该文件中的要求完成整个编译过程。而Makefile文件由configure命令产生。当执行configure命令时，configure会根据当前系统环境动态生成一个适合本系统的Makefile文件，供make命令使用。
安装步骤：
1.cd /usr/local/ && mkdir memcached
2.wget http://memcached.org/files/memcached-1.4.29.tar.gz
3.tar -zxvf memcached-1.4.29.tar.gz            # 解压源码，解压后查看INSTALL与README文件，这两个文件中详细介绍了本软件的安装方法和注意事项。
4../configure --prefix=/usr/local/memcached/   # 此时当前目录下将会生成一个Makefile文件。注意：–prefix参数指定软件安装目录。当执行make install命令时，会将软件安装在此路径中。
5.make uninstall && make clean                 # make clean命令用来清除上一次编译生成的目标文件。这个步骤可有可无，但为了确保编译的成功，还是加上为好。防止由于软件中含有残留的目标文件导致编译失败。
  make                                         # 此时make会读取Makefile文件，将源码编译成二进制文件，并存放在当前目录下。
6.make install                                 # 此时二进制文件会被安装到先前configure prefix参数设置的路径中去。

gcc -S main.c       #生成main.s汇编代码
gcc -o main main.c      #指定生成文件
gcc -o main main.c -m32     #生成32位系统可执行代码

# Linux函数库
运行在Linux上的软件时常会调用Linux内核的某些功能或其他软件的某些功能，那么这些被软件调用的功能称为Linux的函数库。软件自身的函数库存放在软件安装目录下的lib中，而Linux的函数库存放在/usr/lib和/usr/include中，linux内核的函数库存放在/lib/modules中。
# Linux函数库的分类
1. 静态函数库
- 扩展名：xxx.a
- 在编译时会被整合到软件的二进制文件中去。因此拥有静态函数库的软件较为庞大。而且当系统的函数库更新时，引用该函数库的所有软件都需要重新编译才能正常使用。这是非常麻烦的！但拥有静态函数库的软件可以独立运行。
2. 动态函数库
- 扩展名：xxx.so
- 在编译时仅仅将函数库的路径整合到软件的二进制文件中去。由于软件中包含的是函数库的路径，因此该软件无法独立运行，且函数库的路径不能发生变化，一旦变化，该软件将无法找到函数库，从而无法运行！这是动态函数库的最大缺点。但当动态函数库更新时，软件无需重新编译，因此更新较为方便，这是动态函数库的最大优点。
目前大部分软件均使用动态函数库，就是因为动态函数库在更新时体现出的优势。
# 提升函数库读取效率
软件在运行某些功能时需要调用函数库中的函数，而函数库又是以文件的形式存放在外设上。那么如果将函数库存放在内存中，那么将会大大提升读取速度。在Linux中，可以使用ldconfig命令将指定的函数库加载进内存。具体步骤如下：
1. 在/etc/ld.so.conf中设置需要加载进内存的函数库
2. 使用ldconfig命令使配置生效
# 查看软件的动态函数库
ldd命令
在linux中，ldd是list dynamic dependencies的缩写，使用ldd命令即可查看指定软件所使用的全部动态函数库。
在实际linux开发与调试中，要经常查看动态库依赖关系，ldd用得还是比较多的，特别是出现故障的时候。
Q：error while loading shared libraries: libcares.so.2: cannot open shared object file: No such file or directory
A：sudo find / -name *libcares*
   如果找得到 libcares.so.2 这个,也就是和报错一模一样的名字的就说明本地有
   如果找不到, 可以试试 apt-get install libcares2 (apt install libc-ares2)
   如果 apt-get 失败, 就去 opensuse 下载:
   https://software.opensuse.org/download/package?package=libcares2&pro
   然后转换成 deb 包 alien libcares2_1.15.0+20200117-2.1_amd64.rpm
   最后 dkpg 安装 dpkg -i libcares2_1.15.0+20200117-2.1_amd64.deb
   如果还是报错, 就执行 ldconfig 命令重新链接一下
   尝试后还是报错的话就 cat /etc/ld.so.conf, 我的这个文件内容如下:
   include /etc/ld.so.conf.d/*.conf
   /usr/local/lib
   只需要将我的结果目录插入到这个 ld.so.conf 文件内就好:
   $ echo "/usr/lib64" >> /etc/ld.so.conf
   // 重新链接
   $ ldconfig

shell: CLI GUI		kernel
#  root权限
$  普通用户

通配符: *, ?, [0-9], [abc], [^abc]

history
  !!
  !+字符
  !+num
  !?abc
  !-n
Ctrl+r  反向搜索历史命令
esc.

su -用户名 # 切换用户
su - || su # 回到根用户
sudo  # 使用管理员用户身份运行命令
exit
hostname
ls
uname [-r -a --all]
id  # 显示当前用户信息
passwd # 修改当前用户密码
cp -r
rm -r -i -f
rmdir
mkdir -p
uniq -dc # -d 不同 -c 统计
sort -n -k -r 排序
du -sm * | sort -n | cat -n
wc -l -c -m -w
chattr +i filename               # 无法删除,移动,重命名文件
chattr +a filename               # 只能追加内容,不能删除文件
lsattr filename
tac 按行反向输出文件内容
diff filename1 filename2
vimdiff [-o] filename1 filename2     #vim中视图比较两个文本文件
firefox & #后台运行

sleep 5000
在 Linux 和 Unix 系统中，作业被定义为已开始运行但尚未完成的任务。每个任务基本上都是正在执行的程序，这是一个过程。每个作业都分配有一个唯一的 ID，称为作业编号（作业 ID）。我们可以在后台运行作业而无需用户的任何干预，也可以作为当前作业在前台运行。
$ jobs
[1]- Stopped nautilus
[2]+ Stopped jedit
您可以看到作业的状态已停止。加号 (+) 表示当前作业。减号 (-) 表示上一个作业。现在，要在后台运行停止的作业，我们使用 bg 命令。默认情况下，如果没有给出参数，bg 在后台运行当前作业。
$ bg %2
bg 命令可以将作业号作为参数。作业编号显示在作业输出的方括号中。在上面的例子中，nautilus 的作业号是 1。所以现在我们使用这个作业号在后台运行作业。需要该%标志来指示工作编号。
bg 命令还可以通过名称引用作业。例如%String指名称以指定字符串开头的作业，%?String指名称中包含指定字符串的作业。
$ fg %?ed

mktorrent -v -p -l 22 -a url -o fn.torrent file
mktorrent -v -p -l 22 -a http://bt2.54new.com:8080/announce -o yaaaaz.torrent Glorious.Day.E36.720p.HDTV.x264-DoA.mkv
url换成你要发布PT站的tracker,例如chdbits是http://tracker.chdbits.org/announce.php
fn换成你发布的种子文件的名字如：ab.torrent
file换成你的发布资源的文件或文件夹名字

alias永久生效：在$HOME/.bashrc 文件中添加后，source .bashrc

source命令用法：
source FileName
作用:在当前bash环境下读取并执行文件中的命令。
注：该命令通常用命令“.”来替代。
如：source .bashrc 与 . .bashrc 是等效的。

seq -w 1 1 10                    # 等宽产生从1开始，1为步长，到10的序号列
seq -s ' ' 10                    # 分隔符
shuf -n 1 -e 1 2 3 4             # 生成随机排列
shuf filename

paste命令
paste单词意思是粘贴。该命令主要用来将多个文件的内容合并，与cut命令完成的功能刚好相反。粘贴两个不同来源的数据时，首先需将其分类，并确保两个文件行数相同。paste将按行将不同文件行信息放在一行。缺省情况下，paste连接时，用空格或tab键分隔新行中不同文本，除非指定-d选项，它将成为域分隔符。
paste格式为:paste -d ' ' -s -file1 file2
选项含义如下：
-d 指定不同于空格或tab键的域分隔符。例如用@分隔域，使用- d @。
-s 将每个文件合并成行而不是按行粘贴。
paste命令还有一个很有用的选项（-）。意即对每一个（-），从标准输入中读一次数据。使用空格作域分隔符，以一个6列格式显示目录列表。方法如下：
> ls /etc | paste -d " " - - - - - -
seq -w 0 10 |paste -d ' ' - - - - -
00 01 02 03 04
05 06 07 08 09

join -a1          -a2       [-a1 -a2]       -o 1.1          -o 1.1 1.2 2.1 2.2             -t " "        file1 file2
     左连接       右连接     全连接          表示只输出第一个文件的第一个字段                指定分隔符

tr命令可以对来自标准输入的字符进行替换、压缩和删除。它可以将一组字符变成另一组字符，经常用来编写优美的单行命令，作用很强大。
tr "charset1" "charset2"
echo "HELLO WORLD" | tr 'A-Z' 'a-z'
tr -c "charset"   " "  #替换不属于字符集的字符
tr -d "charset"        #删除属于字符集的字符
tr -s "charset"        #缩连续字符为一个

nl filename
-b ：指定行号指定的方式，主要有两种：
-b a ：表示不论是否为空行，也同样列出行号(类似 cat -n)；
-b t ：如果有空行，空的那一行不要列出行号(默认值)；
-n ：列出行号表示的方法，主要有三种：
-n ln ：行号在屏幕的最左方显示；
-n rn ：行号在自己栏位的最右方显示，且不加 0 ；
-n rz ：行号在自己栏位的最右方显示，且加 0 ；
-w ：行号栏位的占用的位数。

watch命令以周期性的方式执行给定的指令，指令输出以全屏方式显示。
watch是一个非常实用的命令，基本所有的Linux发行版都带有这个小工具，如同名字一样，watch可以帮你监测一个命令的运行结果，省得你一遍遍的手动运行。
语法 watch(选项)(参数) 选项 -n：指定指令执行的间隔时间（秒）； -d：高亮显示指令输出信息不同之处； -t：不显示标题。

uptime - Tell how long the system has been running.
DESCRIPTION
       uptime  gives a one line display of the following information.
       The current time,
       how long the system has been running,
       how many users are currently logged on,
       and the system load averages for the past 1, 5, and 15 minutes.

       This is the same information contained in the header line displayed by w(1).
       System  load  averages  is  the  average number of processes that are either in a
       runnable or uninterruptable state.  A process in a runnable state is either using
       the CPU or waiting to use the CPU.  A process in uninterruptable state is waiting
       for some I/O access, eg waiting for disk.  The averages are taken over the  three
       time  intervals.   Load  averages  are not normalized for the number of CPUs in a
       system, so a load average of 1 means a single CPU system is loaded all  the  time
       while on a 4 CPU system it means it was idle 75% of the time.
OPTIONS
       -p, --pretty     show uptime in pretty format
       -h, --help        display this help text

lsusb lscpu lsmem lsof lsblk

dmesg   print or control the kernel ring buffer.
dmesg --clear
dmesg --console-on
dmesg --console-off
dmesg --console-level level
dmesg --read-clear [options]

Linux链接概念
Linux链接分两种，一种被称为硬链接（Hard Link），另一种被称为符号链接（Symbolic Link）。默认情况下，ln命令产生硬链接。
硬连接指通过索引节点来进行连接。在Linux的文件系统中，保存在磁盘分区中的文件不管是什么类型都给它分配一个编号，称为索引节点号(Inode Index)。在Linux中，多个文件名指向同一索引节点是存在的。一般这种连接就是硬连接。硬连接的作用是允许一个文件拥有多个有效路径名，这样用户就可以建立硬连接到重要文件，以防止“误删”的功能。其原因如上所述，因为对应该目录的索引节点有一个以上的连接。只删除一个连接并不影响索引节点本身和其它的连接，只有当最后一个连接被删除后，文件的数据块及目录的连接才会被释放。也就是说，文件真正删除的条件是与之相关的所有硬连接文件均被删除。
另外一种连接称之为符号连接（Symbolic Link），也叫软连接。软链接文件有类似于Windows的快捷方式。它实际上是一个特殊的文件。在符号连接中，文件实际上是一个文本文件，其中包含的有另一文件的位置信息。两个文件名不同，相对应的INode也不一样，但是一个文件的内容是另一个文件的路径信息，打开了一个相当于打开了另外一个，相当于快捷方式。
ln -s 源文件/源文件夹 连接名
rm [-rf] 连接名

&  表示任务在后台执行，如要在后台运行redis-server,则有  redis-server &
&& 表示前一条命令执行成功时，才执行后一条命令 ，如 echo '1‘ && echo '2'
|  表示管道，上一条命令的输出，作为下一条命令参数，如 echo 'yes' | wc -l
|| 表示上一条命令执行失败后，才执行下一条命令，如 cat nofile || echo "fail"

stat命令主要用于显示文件或文件系统的详细信息，该命令的语法格式如下：
-f 不显示文件本身的信息，显示文件所在文件系统的信息
-L 显示符号链接
-t 简洁模式，只显示摘要信息

free -b k m g
-t display a line showing the column totals.

find从磁盘遍历查找文件或目录。
find . -maxdepth 1 -type d  # 找出当前目录下的文件夹
which查找二进制命令，按环境变量 PATH 路径查找。
whereis查找二进制命令，按环境变量 PATH 路径查找。
locate从数据库 (/var/lib/mlocate/mlocate.db) 查找命令，使用 updatedb 更新库。

echo -n str # 不输出换行
echo -e str # 输出转义字符
root@ubuntu:~# echo -n '123456' | md5sum
e10adc3949ba59abbe56e057f20f883e  -
