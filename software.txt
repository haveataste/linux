Ubuntu桌面背景图片路径:/usr/share/backgrounds

在～/.bashrc文件中增加：
if [[ $- == *i* ]]
then
    bind '"\e[A": history-search-backward'
    bind '"\e[B": history-search-forward'
fi
可以在命令行中根据输入字符快速的翻找命令

Ubuntu下解压.rar文件，提示"Parsing filters is unsupported"错误，原因是Linux版本默认不支持rar商业/非自由格式，我们只需要安装unrar即可
sudo apt-get install unrar

安装中文环境
locale [-a]
apt-get update && apt-get install language-pack-zh-hans -y  # 安装中文语言包
vim /etc/default/locale
  LANG="zh_CN.UTF-8"
  LANGUAGE="zh_CN:zh"
  LC_NUMERIC="zh_CN"
  LC_TIME="zh_CN"
  LC_MONETARY="zh_CN"
  LC_PAPER="zh_CN"
  LC_NAME="zh_CN"
  LC_ADDRESS="zh_CN"
  LC_TELEPHONE="zh_CN"
  LC_MEASUREMENT="zh_CN"
  LC_IDENTIFICATION="zh_CN"
  LC_ALL="zh_CN.UTF-8"
reboot
echo $LANG  # 显示当前语言环境
  zh_CN.UTF-8

安装ftp服务
apt-get install vsftpd && service vsftpd start || chkconfig vsftpd on
修改两个文件
vi /etc/ftpusers     # 在root前加#
vi /etc/vsftpd.conf  # 修改配置文件
  # Uncomment this to enable any form of FTP write command.
  write_enable=YES
  # ASCII mangling is a horrible feature of the protocol.
  ascii_upload_enable=YES
  ascii_download_enable=YES
关防火墙
service iptables stop || chkconfig iptables off
 
安装Java
下载地址：https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html
解压命令：tar -zxvf jdk-8u281-linux-x64.tar.gz -C ~/temp/
配置环境变量：
$ sudo vi /etc/environment
PATH="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/snap/bin:$JAVA_HOME/bin"
export CLASSPATH=.:$JAVA_HOME/lib:$JAVA_HOME/jre/lib
export JAVA_HOME=~/temp/jdk1.8.0_281
$ source /etc/environment
配置所有用户的环境变量：
$ sudo vi /etc/profile  # 在最后增加
#set Java environment
export JAVA_HOME=~/temp/jdk1.8.0_281
export JRE_HOME=${JAVA_HOME}/jre
export CLASSPATH=.:JAVA_HOME/lib:JRE_HOME/lib:${CLASSPATH}
export PATH=$JAVA_HOME/bin:$JRE_HOME/bin:$PATH
$ source /etc/profile

安装FileZilla
sudo apt-get install filezilla

安装flashplayer
sudo apt-get install flashplugin-installer

安装Notepadqq命令：
sudo add-apt-repository ppa:notepadqq-team/notepadqq
sudo apt-get update
sudo apt-get install notepadqq
卸载命令如下：
sudo apt-get remove notepadqq
sudo add-apt-repository --remove ppa:notepadqq-team/notepadqq

安装Postman
下载地址：https://www.getpostman.com/downloads/
解压命令：sudo tar -zxf Postman-linux-x64-7.6.0.tar.gz
更改权限：sudo chmod -R 777 Postman
启动运行：./Postman/Postman或者双击Postman
创建图标：sudo ln -s /home/lixing/software/Postman/Postman /usr/bin/postman
         sudo vim /usr/share/applications/postman.desktop
         内容如下：
         [Desktop Entry]
         Encoding=UTF-8
         Name=Postman
         Exec=/usr/bin/postman
         Icon=/home/lixing/software/Postman/app/resources/app/assets/icon.png
         Terminal=false
         Type=Application
         Categories=Development

安装OBS(Open Broadcaster Software)
sudo apt install ffmpeg
ffmpeg -h
sudo add-apt-repository ppa:obsproject/obs-studio
sudo apt update
sudo apt install obs-studio

安装Visual Studio Code
下载地址：https://code.visualstudio.com/docs/?dv=linux64_deb
双击安装或使用dpkg命令安装

安装Fiddler for linux
# https://appimage.org/   Need Fiddler for Mac or Linux? Try the new Fiddler Everywhere Beta. Built from scratch to run on all major platforms.
->https://downloads.getfiddler.com/linux/fiddler-everywhere-0.10.2.AppImage
# 安装mono: Sponsored by Microsoft, Mono is an open source implementation of Microsoft's .NET Framework based on the ECMA standards for C# and the Common Language Runtime for development of cross platform applications.
sudo apt-get install  mono-complete
# 下载MonoFiddler,并解压
http://fiddler.wikidot.com/mono
# 在Fiddler.exe目录下执行命令：
mono Fiddler.exe
# 手机抓包配置，要求要求手机和电脑处于同一网络环境下
# 在Fiddler中，点击Tools——>Fiddler Options——>Connections——>勾选Allow remote computers to connect——>保存，重启Fiddler即可。
# 进入手机WIFI设置——>高级设置——>打开手动HTTP代理——>代理服务器主机名为电脑IP地址——>代理服务器端口为8888——>保存退出。
# Ubuntu下添加系统根证书, 只要将证书(扩展名为crt)复制到 /usr/local/share/ca-certificates/ 文件夹然后运行即可。
添加证书：sudo update-ca-certificates
删除证书：sudo rm -f /usr/local/share/ca-certificates/*.crt
         sudo update-ca-certificates

安装VPN
sudo apt-get install pptp-linux
sudo pptpsetup --create myvpn --server 'dip.hicast.work' --username vpntest --password vpntest --encrypt --start
poff myvpn && pon myvpn
sudo pppd call myvpn updetach
ip addr show || ifconfig || route add -net 0.0.0.0 dev ppp0 || route -n

root@vultr:~# pptpsetup --create myvpn --server 'dip.hicast.work' --username vpntest --password vpntest --encrypt --start
Using interface ppp0
Connect: ppp0 <--> /dev/pts/1
CHAP authentication succeeded
MPPE 128-bit stateless compression enabled
local  IP address 172.31.1.5
remote IP address 172.31.1.253
root@vultr:~# poff myvpn
root@vultr:~# ifconfig
ens3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 45.76.163.10  netmask 255.255.254.0  broadcast 45.76.163.255
        inet6 fe80::5400:2ff:fef2:5668  prefixlen 64  scopeid 0x20<link>
        inet6 2001:19f0:4400:4941:5400:2ff:fef2:5668  prefixlen 64  scopeid 0x0<global>
        ether 56:00:02:f2:56:68  txqueuelen 1000  (Ethernet)
        RX packets 1590  bytes 1444994 (1.4 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1293  bytes 146492 (146.4 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 136  bytes 11369 (11.3 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 136  bytes 11369 (11.3 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

root@vultr:~# pon myvpn
root@vultr:~# ifconfig
ens3: flags=4163<UP,BROADCAST,RUNNING,MULTICAST>  mtu 1500
        inet 45.76.163.10  netmask 255.255.254.0  broadcast 45.76.163.255
        inet6 fe80::5400:2ff:fef2:5668  prefixlen 64  scopeid 0x20<link>
        inet6 2001:19f0:4400:4941:5400:2ff:fef2:5668  prefixlen 64  scopeid 0x0<global>
        ether 56:00:02:f2:56:68  txqueuelen 1000  (Ethernet)
        RX packets 1648  bytes 1449742 (1.4 MB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 1334  bytes 151342 (151.3 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

lo: flags=73<UP,LOOPBACK,RUNNING>  mtu 65536
        inet 127.0.0.1  netmask 255.0.0.0
        inet6 ::1  prefixlen 128  scopeid 0x10<host>
        loop  txqueuelen 1000  (Local Loopback)
        RX packets 138  bytes 11529 (11.5 KB)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 138  bytes 11529 (11.5 KB)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

ppp0: flags=4305<UP,POINTOPOINT,RUNNING,NOARP,MULTICAST>  mtu 1496
        inet 172.31.1.5  netmask 255.255.255.255  destination 172.31.1.253
        ppp  txqueuelen 3  (Point-to-Point Protocol)
        RX packets 6  bytes 60 (60.0 B)
        RX errors 0  dropped 0  overruns 0  frame 0
        TX packets 6  bytes 66 (66.0 B)
        TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0

安装OpenVPN
# 一般来说OpenVPN在Linux下都是基于命令行的，而Ubuntu可以通过安装扩展放在网络连接上实现GUI操作。
sudo apt-get install openvpn network-manager-openvpn network-manager-openvpn-gnome

安装cadaver: cadaver is a command-line WebDAV client for Unix.
# apt-get install cadaver -y
# cadaver [OPTIONS] http://hostname[:port]/path
# cadaver https://dav.jianguoyun.com/dav/

安装fcrackzip: 破解zip文件密码
# apt-get install fcrackzip -y
# fcrackzip -h
fcrackzip version 1.0, a fast/free zip password cracker
written by Marc Lehmann <pcg@goof.com> You can find more info on
http://www.goof.com/pcg/marc/
USAGE: fcrackzip
          [-b|--brute-force]            use brute force algorithm
          [-D|--dictionary]             use a dictionary
          [-B|--benchmark]              execute a small benchmark
          [-c|--charset characterset]   use characters from charset
          [-h|--help]                   show this message
          [--version]                   show the version of this program
          [-V|--validate]               sanity-check the algortihm
          [-v|--verbose]                be more verbose
          [-p|--init-password string]   use string as initial password/file
          [-l|--length min-max]         check password with length min to max
          [-u|--use-unzip]              use unzip to weed out wrong passwords
          [-m|--method num]             use method number "num" (see below)
          [-2|--modulo r/m]             only calculcate 1/m of the password
          file...                    the zipfiles to crack
methods compiled in (* = default):
 0: cpmask
 1: zip1
*2: zip2, USE_MULT_TAB
# fcrackzip -b -l 8 -c 'aA1' -v -u wlmm.zip

安装jupyter
# pip install jupyterlab && jupyter-lab
# pip install notebook && jupyter notebook
pip install jupyter
# 生成密钥
python
>> from notebook.auth import passwd  
>> passwd() 
Enter password:abc123
'argon2:$argon2id$v=19$m=10240,t=10,p=8$uTN20WdQ6cjHM4+0aNHquQ$UMNOiaSx8w3A8ZDLTrRsl+2/A3bi5mWxic8kemREn50'
# 生成jupyter配置文件
jupyter notebook --generate-config
# 修改配置文件
vim ~/.jupyter/jupyter_notebook_config.py
    c.NotebookApp.ip = '*'
    c.NotebookApp.password = 'argon2:$argon2id$v=19$m=10240,t=10,p=8$uTN20WdQ6cjHM4+0aNHquQ$UMNOiaSx8w3A8ZDLTrRsl+2/A3bi5mWxic8kemREn50'
    c.NotebookApp.port = 8888
    c.NotebookApp.allow_remote_access = True
    c.NotebookApp.open_browser = False
# 启动
jupyter notebook --allow-root

使用bypy
pip install requests bypy
bypy info
Please visit:
https://openapi.baidu.com/oauth/2.0/authorize?scope=basic+netdisk&redirect_uri=oob&response_type=code&client_id=q8WE4EpCsau1oS0MplgMKNBn
And authorize this app
Paste the Authorization Code here within 10 minutes.
Press [Enter] when you are done     # 提示在下边粘贴授权码
bf26197f8fe799843565ac734648****    # 授权码
# 由于百度PCS API权限限制，程序只能存取百度云端/apps/bypy目录下面的文件和目录。
bypy list
/apps/bypy ($t $f $s $m $d):
# 把本地当前目录下的文件同步到百度云盘：
bypy upload
bypy syncup
# 把云盘上的内容同步到本地:
bypy downdir
bypy syncdown
# 比较本地当前目录和云盘根目录，看是否一致，来判断是否同步成功：
bypy compare
# 更详细的了解某一个命令：
bypy help

使用dropbox_uploader.sh
curl "https://raw.githubusercontent.com/andreafabrizi/Dropbox-Uploader/master/dropbox_uploader.sh" -o dropbox_uploader.sh
curl -O "https://raw.githubusercontent.com/haveataste/share/refs/heads/master/ago/dropbox_uploader.sh" || chmod +x dropbox_uploader.sh
./dropbox_uploader.sh
Access token:
# 查询用户信息
./dropbox_uploader.sh info
# 显示根目录内容
./dropbox_uploader.sh list
# 要列出某个特定文件夹中的所有内容
./dropbox_uploader.sh list Documents/manuals
# 将一个本地文件上传到 Dropbox 文件夹
./dropbox_uploader.sh upload snort.pdf Documents/manuals
# 从 Dropbox 下载一个文件到本地
./dropbox_uploader.sh download Documents/manuals/mysql.pdf ./mysql.pdf
# 从 Dropbox 下载一个完整的远程文件夹到一个本地的文件夹
./dropbox_uploader.sh download Documents/manuals ./manuals
# 在 Dropbox 上创建一个新的远程文件夹
./dropbox_uploader.sh mkdir Documents/whitepapers
# 完全删除 Dropbox 中某个远程的文件夹（包括它所含的所有内容）
./dropbox_uploader.sh delete Documents/manuals

使用goodsync
curl -O https://www.goodsync.com/download/goodsync-linux-x86_64-release.run && chmod a+x goodsync-linux-x86_64-release.run && ./goodsync-linux-x86_64-release.run
gsync job jiojio1 /f1=/root/RemoteWorking/zzz /f2=http://dav.jianguoyun.com/dav/gsync /userid2="" /password2="" /dir=ltor
gsync analyze /all
gsync analyze jiojio1 jiojio2
gsync job-list
gsync job-delete jiojio1
gsync -h
    Command=/help Profile=/root/.goodsync
    FirstAfterLogOpts=/help Profile=/root/.goodsync
    GSYNC ver 11.2.4.4
    Ver 11.2.4.4, Built: Jun 24 2020  22:16:46
    License: GS-V11 Trial
    GsAcctId=myarpanet-protonmail-com Email=myarpanet@protonmail.com CompId=ws-isubfd-0
    DaysUsed=1 DaysInstalled=1 DaysInAccount=0 AccountTrial=0
    /usr/bin/gsync
    UNIX
    AffID: [g-s]
    Usage: GSYNC  [<profile-option>...] [<run-option>...] [<global-option>...] <global-command> or <job-command-and-options>

安装asciinema
apt-add-repository ppa:zanchey/asciinema
apt-get update && apt-get install asciinema
asciinema rec [filename]
asciinema play [/path/to/asciicast.cast]
asciinema auth

使用vfsync
vfsync version 2017-06-10, Copyright (c) 2017 Fabrice Bellard
usage: vfsync [options] [command] [args]
command is:
help [command]          show the help for 'command'
checkout (co) url dir   checkout files from url to dir
sync                    update then commit (default command)
update (up)             update local files from server
commit (ci)             commit local files to server
info                    info about the files
Global options:
-h           show this help
-n           dry run (do not send the commit to the server)
-q           quiet mode
-g           restore user/group (default for super-user)
-p password  set password
# 将vfs中的home目录复制到本地文件夹
vfsync -u happyhack co https://vfsync.org/u/happyhack/home my_home
# export a file from the virtual machine
export_file filename
# https://vfsync.org/vm.html?login=1 20250521
vflogin happyhack

安装apache
apt-get install apache2
Usage: apache2 [-D name] [-d directory] [-f file]
               [-C "directive"] [-c "directive"]
               [-k start|restart|graceful|graceful-stop|stop]
               [-v] [-V] [-h] [-l] [-L] [-t] [-T] [-S] [-X]
Options:
  -D name            : define a name for use in <IfDefine name> directives
  -d directory       : specify an alternate initial ServerRoot
  -f file            : specify an alternate ServerConfigFile
  -C "directive"     : process directive before reading config files
  -c "directive"     : process directive after reading config files
  -e level           : show startup errors of level (see LogLevel)
  -E file            : log startup errors to file
  -v                 : show version number
  -V                 : show compile settings
  -h                 : list available command line options (this page)
  -l                 : list compiled in modules
  -L                 : list available configuration directives
  -t -D DUMP_VHOSTS  : show parsed vhost settings
  -t -D DUMP_RUN_CFG : show parsed run settings
  -S                 : a synonym for -t -D DUMP_VHOSTS -D DUMP_RUN_CFG
  -t -D DUMP_MODULES : show all loaded modules 
  -M                 : a synonym for -t -D DUMP_MODULES
  -t                 : run syntax check for config files
  -T                 : start without DocumentRoot(s) check
  -X                 : debug mode (only one worker, do not detach)

BBR(Bottleneck Bandwidth and RTT) Google 新的 TCP 拥塞控制算法
Ubuntu开启BBR的前提是内核版本必须等于高于4.9
# uname -ir
Ubuntu内核升级
# echo "net.core.default_qdisc=fq" >> /etc/sysctl.conf
# echo "net.ipv4.tcp_congestion_control=bbr" >> /etc/sysctl.conf
# sysctl -p
检察内核能否已开启BBR，显现以下即已开启：
# sysctl net.ipv4.tcp_available_congestion_control
net.ipv4.tcp_available_congestion_control = bbr cubic reno
检察BBR能否启动，显现以下即启动胜利：
# lsmod | grep bbr
tcp_bbr                20480  14

VNC(Virtual Network Console) 虚拟网络控制台
# 服务器端安装桌面环境和VNC服务
apt-get install xfce4 vnc4server
# vncserver 设置密码，没有设置密码将不能运行
vncpasswd
vi ~/.vnc/xstartup  将最后一行替换成：startxfce4 &
# 重启vnc服务
vncserver -kill :1
vncserver :1
vncserver -geometry 1280x720
Usage: vncserver [<OPTIONS>] [:<DISPLAY#>]
       vncserver -kill :<DISPLAY#>
<OPTIONS> are Xvnc4 options, or:
        -name <DESKTOP-NAME>
        -depth <DEPTH>
        -geometry <WIDTH>x<HEIGHT>
        -httpport number
        -basehttpport number
        -alwaysshared
        -nevershared
        -pixelformat rgb<NNN>
        -pixelformat bgr<NNN>
        <Xvnc4-options>...
See vnc4server and Xvnc4 manual pages for more information.
# 客户端访问
104.224.131.4:5901
# 20230430 buyvm VPS
# 下载vncviewer: https://vnc-viewer.en.softonic.com/download?ex=DINS-635.2
apt-get update
apt-get install libc6 libgcc1 libstdc++6 libx11-6 libxext6 libxtst6 x11-common xbase-clients zlib1g xfonts-base vnc-java xfce4 -y
apt-get install -f
# https://www.tightvnc.com/download.php
# 下载vnc4server: https://packages.ubuntu.com/bionic/vnc4server
curl -sSL -O http://za.archive.ubuntu.com/ubuntu/pool/universe/v/vnc4/vnc4server_4.1.1+xorg4.3.0-37.3ubuntu2_amd64.deb
dpkg -i vnc4server_4.1.1+xorg4.3.0-37.3ubuntu2_amd64.deb
# 如果提示dbus-launch not found,the desktop will not work porperly，需要安装 dbus-x11
sudo apt install dbus-x11 -y
