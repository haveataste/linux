git --version
git clone https://github.com/usr/repo.git
git add fn|*
git rm [-rf] fn|*
git commit -a --allow-empty-message -m ''
git push origin master

git remote -v # 显示当前仓库连接
git remote rm origin # 删除以防止远端链接占用
git remote add origin <server> # 连接远端仓库
git remote add origin https://usr:psd@github.com/usr/repo.git
git config --global user.name "username"
git config --global user.email user@qq.com
git config --list # ~/.gitconfig
ssh-keygen
ssh -T git@github.com # 查看主机是否与github网站之间的ssh通信是否连接成功
git remote add origin git@github.com:usr/repo.git

git checkout -b feature_x # 创建分支并切换
git checkout master # 切回主分支
git branch # 列出本地分支
git branch -r # 列出远端分支
git branch -a # 列出本地和远程所有分支
git branch newbranch # 创建
git branch -m|-M oldname newname # 改名
git branch -d|-D branch_name # 删除

git push origin branch # 推送到远端分支
git push -f, --force           force updates
git push -u, --set-upstream    set upstream for git pull/status
git pull origin branch # 拉取远端仓库
git merge branch # 合并其他分支到当前分支
git diff <source_branch> <target_branch>
git diff [master] origin/master
git log
git log --pretty=oneline
git log --graph # 分支合并图
git fetch --all && git reset --hard origin/master && git pull origin master # 强制远端覆盖本地
git fetch origin # 同步远程服务器上的数据到本地
git reset --hard origin/master # 获取远端最新版本，放弃本地的改动和提交
git reset --hard HEAD^ # 回退到上一个版本
git reset --hard 3628164

# .gitignore只能忽略那些原来没有被track的文件，如果某些文件已经被纳入了版本管理中，则修改.gitignore文件是无效的
# 解决方法就是先把本地缓存删除（改变成未track状态），然后再提交:
git rm -r --cached . && git add .
git commit -m 'update .gitignore'
# 如果你想添加被.gitignore忽略的文件，可以用-f强制添加：
git add -f fn.class
# 或者你发现，可能是.gitignore写得有问题，需要找出来到底哪个规则写错了，可以用git check-ignore命令检查：
git check-ignore -v fn.class

# 在Config中允许使用Sparse Checkout模式：
git config core.sparsecheckout true
# 接下来你需要告诉Git哪些文件或者文件夹是你真正想checkout的，你可以将它们作为一个列表保存在 .git/info/sparse-checkout 文件中。 例如：
echo "libs" >> .git/info/sparse-checkout
echo "apps/register.go" >> .git/info/sparse-checkout
echo "resource/css" >> .git/info/sparse-checkout
# 最后，你只要以正常方式从你想要的分支中将你的项目拉下来就可以了：
git pull origin master
